// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"learning2.0/model"
)

func newFund(db *gorm.DB, opts ...gen.DOOption) fund {
	_fund := fund{}

	_fund.fundDo.UseDB(db, opts...)
	_fund.fundDo.UseModel(&model.Fund{})

	tableName := _fund.fundDo.TableName()
	_fund.ALL = field.NewAsterisk(tableName)
	_fund.ID = field.NewInt64(tableName, "id")
	_fund.UserID = field.NewInt64(tableName, "user_id")
	_fund.Money = field.NewInt64(tableName, "money")

	_fund.fillFieldMap()

	return _fund
}

type fund struct {
	fundDo fundDo

	ALL    field.Asterisk
	ID     field.Int64
	UserID field.Int64
	Money  field.Int64

	fieldMap map[string]field.Expr
}

func (f fund) Table(newTableName string) *fund {
	f.fundDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f fund) As(alias string) *fund {
	f.fundDo.DO = *(f.fundDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *fund) updateTableName(table string) *fund {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt64(table, "id")
	f.UserID = field.NewInt64(table, "user_id")
	f.Money = field.NewInt64(table, "money")

	f.fillFieldMap()

	return f
}

func (f *fund) WithContext(ctx context.Context) IFundDo { return f.fundDo.WithContext(ctx) }

func (f fund) TableName() string { return f.fundDo.TableName() }

func (f fund) Alias() string { return f.fundDo.Alias() }

func (f *fund) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *fund) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 3)
	f.fieldMap["id"] = f.ID
	f.fieldMap["user_id"] = f.UserID
	f.fieldMap["money"] = f.Money
}

func (f fund) clone(db *gorm.DB) fund {
	f.fundDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f fund) replaceDB(db *gorm.DB) fund {
	f.fundDo.ReplaceDB(db)
	return f
}

type fundDo struct{ gen.DO }

type IFundDo interface {
	gen.SubQuery
	Debug() IFundDo
	WithContext(ctx context.Context) IFundDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFundDo
	WriteDB() IFundDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFundDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFundDo
	Not(conds ...gen.Condition) IFundDo
	Or(conds ...gen.Condition) IFundDo
	Select(conds ...field.Expr) IFundDo
	Where(conds ...gen.Condition) IFundDo
	Order(conds ...field.Expr) IFundDo
	Distinct(cols ...field.Expr) IFundDo
	Omit(cols ...field.Expr) IFundDo
	Join(table schema.Tabler, on ...field.Expr) IFundDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFundDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFundDo
	Group(cols ...field.Expr) IFundDo
	Having(conds ...gen.Condition) IFundDo
	Limit(limit int) IFundDo
	Offset(offset int) IFundDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFundDo
	Unscoped() IFundDo
	Create(values ...*model.Fund) error
	CreateInBatches(values []*model.Fund, batchSize int) error
	Save(values ...*model.Fund) error
	First() (*model.Fund, error)
	Take() (*model.Fund, error)
	Last() (*model.Fund, error)
	Find() ([]*model.Fund, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Fund, err error)
	FindInBatches(result *[]*model.Fund, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Fund) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFundDo
	Assign(attrs ...field.AssignExpr) IFundDo
	Joins(fields ...field.RelationField) IFundDo
	Preload(fields ...field.RelationField) IFundDo
	FirstOrInit() (*model.Fund, error)
	FirstOrCreate() (*model.Fund, error)
	FindByPage(offset int, limit int) (result []*model.Fund, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFundDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f fundDo) Debug() IFundDo {
	return f.withDO(f.DO.Debug())
}

func (f fundDo) WithContext(ctx context.Context) IFundDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f fundDo) ReadDB() IFundDo {
	return f.Clauses(dbresolver.Read)
}

func (f fundDo) WriteDB() IFundDo {
	return f.Clauses(dbresolver.Write)
}

func (f fundDo) Session(config *gorm.Session) IFundDo {
	return f.withDO(f.DO.Session(config))
}

func (f fundDo) Clauses(conds ...clause.Expression) IFundDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f fundDo) Returning(value interface{}, columns ...string) IFundDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f fundDo) Not(conds ...gen.Condition) IFundDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f fundDo) Or(conds ...gen.Condition) IFundDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f fundDo) Select(conds ...field.Expr) IFundDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f fundDo) Where(conds ...gen.Condition) IFundDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f fundDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFundDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f fundDo) Order(conds ...field.Expr) IFundDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f fundDo) Distinct(cols ...field.Expr) IFundDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f fundDo) Omit(cols ...field.Expr) IFundDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f fundDo) Join(table schema.Tabler, on ...field.Expr) IFundDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f fundDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFundDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f fundDo) RightJoin(table schema.Tabler, on ...field.Expr) IFundDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f fundDo) Group(cols ...field.Expr) IFundDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f fundDo) Having(conds ...gen.Condition) IFundDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f fundDo) Limit(limit int) IFundDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f fundDo) Offset(offset int) IFundDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f fundDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFundDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f fundDo) Unscoped() IFundDo {
	return f.withDO(f.DO.Unscoped())
}

func (f fundDo) Create(values ...*model.Fund) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f fundDo) CreateInBatches(values []*model.Fund, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f fundDo) Save(values ...*model.Fund) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f fundDo) First() (*model.Fund, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fund), nil
	}
}

func (f fundDo) Take() (*model.Fund, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fund), nil
	}
}

func (f fundDo) Last() (*model.Fund, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fund), nil
	}
}

func (f fundDo) Find() ([]*model.Fund, error) {
	result, err := f.DO.Find()
	return result.([]*model.Fund), err
}

func (f fundDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Fund, err error) {
	buf := make([]*model.Fund, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f fundDo) FindInBatches(result *[]*model.Fund, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f fundDo) Attrs(attrs ...field.AssignExpr) IFundDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f fundDo) Assign(attrs ...field.AssignExpr) IFundDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f fundDo) Joins(fields ...field.RelationField) IFundDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f fundDo) Preload(fields ...field.RelationField) IFundDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f fundDo) FirstOrInit() (*model.Fund, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fund), nil
	}
}

func (f fundDo) FirstOrCreate() (*model.Fund, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Fund), nil
	}
}

func (f fundDo) FindByPage(offset int, limit int) (result []*model.Fund, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f fundDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f fundDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f fundDo) Delete(models ...*model.Fund) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *fundDo) withDO(do gen.Dao) *fundDo {
	f.DO = *do.(*gen.DO)
	return f
}
