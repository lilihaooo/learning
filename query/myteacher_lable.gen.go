// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"learning2.0/model"
)

func newMyteacherLable(db *gorm.DB, opts ...gen.DOOption) myteacherLable {
	_myteacherLable := myteacherLable{}

	_myteacherLable.myteacherLableDo.UseDB(db, opts...)
	_myteacherLable.myteacherLableDo.UseModel(&model.MyteacherLable{})

	tableName := _myteacherLable.myteacherLableDo.TableName()
	_myteacherLable.ALL = field.NewAsterisk(tableName)
	_myteacherLable.ID = field.NewInt64(tableName, "id")
	_myteacherLable.MyteacherID = field.NewInt64(tableName, "myteacher_id")
	_myteacherLable.LabelID = field.NewInt64(tableName, "label_id")

	_myteacherLable.fillFieldMap()

	return _myteacherLable
}

type myteacherLable struct {
	myteacherLableDo myteacherLableDo

	ALL         field.Asterisk
	ID          field.Int64
	MyteacherID field.Int64
	LabelID     field.Int64

	fieldMap map[string]field.Expr
}

func (m myteacherLable) Table(newTableName string) *myteacherLable {
	m.myteacherLableDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m myteacherLable) As(alias string) *myteacherLable {
	m.myteacherLableDo.DO = *(m.myteacherLableDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *myteacherLable) updateTableName(table string) *myteacherLable {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.MyteacherID = field.NewInt64(table, "myteacher_id")
	m.LabelID = field.NewInt64(table, "label_id")

	m.fillFieldMap()

	return m
}

func (m *myteacherLable) WithContext(ctx context.Context) IMyteacherLableDo {
	return m.myteacherLableDo.WithContext(ctx)
}

func (m myteacherLable) TableName() string { return m.myteacherLableDo.TableName() }

func (m myteacherLable) Alias() string { return m.myteacherLableDo.Alias() }

func (m *myteacherLable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *myteacherLable) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 3)
	m.fieldMap["id"] = m.ID
	m.fieldMap["myteacher_id"] = m.MyteacherID
	m.fieldMap["label_id"] = m.LabelID
}

func (m myteacherLable) clone(db *gorm.DB) myteacherLable {
	m.myteacherLableDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m myteacherLable) replaceDB(db *gorm.DB) myteacherLable {
	m.myteacherLableDo.ReplaceDB(db)
	return m
}

type myteacherLableDo struct{ gen.DO }

type IMyteacherLableDo interface {
	gen.SubQuery
	Debug() IMyteacherLableDo
	WithContext(ctx context.Context) IMyteacherLableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMyteacherLableDo
	WriteDB() IMyteacherLableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMyteacherLableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMyteacherLableDo
	Not(conds ...gen.Condition) IMyteacherLableDo
	Or(conds ...gen.Condition) IMyteacherLableDo
	Select(conds ...field.Expr) IMyteacherLableDo
	Where(conds ...gen.Condition) IMyteacherLableDo
	Order(conds ...field.Expr) IMyteacherLableDo
	Distinct(cols ...field.Expr) IMyteacherLableDo
	Omit(cols ...field.Expr) IMyteacherLableDo
	Join(table schema.Tabler, on ...field.Expr) IMyteacherLableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMyteacherLableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMyteacherLableDo
	Group(cols ...field.Expr) IMyteacherLableDo
	Having(conds ...gen.Condition) IMyteacherLableDo
	Limit(limit int) IMyteacherLableDo
	Offset(offset int) IMyteacherLableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMyteacherLableDo
	Unscoped() IMyteacherLableDo
	Create(values ...*model.MyteacherLable) error
	CreateInBatches(values []*model.MyteacherLable, batchSize int) error
	Save(values ...*model.MyteacherLable) error
	First() (*model.MyteacherLable, error)
	Take() (*model.MyteacherLable, error)
	Last() (*model.MyteacherLable, error)
	Find() ([]*model.MyteacherLable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MyteacherLable, err error)
	FindInBatches(result *[]*model.MyteacherLable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MyteacherLable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMyteacherLableDo
	Assign(attrs ...field.AssignExpr) IMyteacherLableDo
	Joins(fields ...field.RelationField) IMyteacherLableDo
	Preload(fields ...field.RelationField) IMyteacherLableDo
	FirstOrInit() (*model.MyteacherLable, error)
	FirstOrCreate() (*model.MyteacherLable, error)
	FindByPage(offset int, limit int) (result []*model.MyteacherLable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMyteacherLableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m myteacherLableDo) Debug() IMyteacherLableDo {
	return m.withDO(m.DO.Debug())
}

func (m myteacherLableDo) WithContext(ctx context.Context) IMyteacherLableDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m myteacherLableDo) ReadDB() IMyteacherLableDo {
	return m.Clauses(dbresolver.Read)
}

func (m myteacherLableDo) WriteDB() IMyteacherLableDo {
	return m.Clauses(dbresolver.Write)
}

func (m myteacherLableDo) Session(config *gorm.Session) IMyteacherLableDo {
	return m.withDO(m.DO.Session(config))
}

func (m myteacherLableDo) Clauses(conds ...clause.Expression) IMyteacherLableDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m myteacherLableDo) Returning(value interface{}, columns ...string) IMyteacherLableDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m myteacherLableDo) Not(conds ...gen.Condition) IMyteacherLableDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m myteacherLableDo) Or(conds ...gen.Condition) IMyteacherLableDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m myteacherLableDo) Select(conds ...field.Expr) IMyteacherLableDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m myteacherLableDo) Where(conds ...gen.Condition) IMyteacherLableDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m myteacherLableDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMyteacherLableDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m myteacherLableDo) Order(conds ...field.Expr) IMyteacherLableDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m myteacherLableDo) Distinct(cols ...field.Expr) IMyteacherLableDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m myteacherLableDo) Omit(cols ...field.Expr) IMyteacherLableDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m myteacherLableDo) Join(table schema.Tabler, on ...field.Expr) IMyteacherLableDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m myteacherLableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMyteacherLableDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m myteacherLableDo) RightJoin(table schema.Tabler, on ...field.Expr) IMyteacherLableDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m myteacherLableDo) Group(cols ...field.Expr) IMyteacherLableDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m myteacherLableDo) Having(conds ...gen.Condition) IMyteacherLableDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m myteacherLableDo) Limit(limit int) IMyteacherLableDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m myteacherLableDo) Offset(offset int) IMyteacherLableDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m myteacherLableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMyteacherLableDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m myteacherLableDo) Unscoped() IMyteacherLableDo {
	return m.withDO(m.DO.Unscoped())
}

func (m myteacherLableDo) Create(values ...*model.MyteacherLable) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m myteacherLableDo) CreateInBatches(values []*model.MyteacherLable, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m myteacherLableDo) Save(values ...*model.MyteacherLable) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m myteacherLableDo) First() (*model.MyteacherLable, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MyteacherLable), nil
	}
}

func (m myteacherLableDo) Take() (*model.MyteacherLable, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MyteacherLable), nil
	}
}

func (m myteacherLableDo) Last() (*model.MyteacherLable, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MyteacherLable), nil
	}
}

func (m myteacherLableDo) Find() ([]*model.MyteacherLable, error) {
	result, err := m.DO.Find()
	return result.([]*model.MyteacherLable), err
}

func (m myteacherLableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MyteacherLable, err error) {
	buf := make([]*model.MyteacherLable, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m myteacherLableDo) FindInBatches(result *[]*model.MyteacherLable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m myteacherLableDo) Attrs(attrs ...field.AssignExpr) IMyteacherLableDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m myteacherLableDo) Assign(attrs ...field.AssignExpr) IMyteacherLableDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m myteacherLableDo) Joins(fields ...field.RelationField) IMyteacherLableDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m myteacherLableDo) Preload(fields ...field.RelationField) IMyteacherLableDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m myteacherLableDo) FirstOrInit() (*model.MyteacherLable, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MyteacherLable), nil
	}
}

func (m myteacherLableDo) FirstOrCreate() (*model.MyteacherLable, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MyteacherLable), nil
	}
}

func (m myteacherLableDo) FindByPage(offset int, limit int) (result []*model.MyteacherLable, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m myteacherLableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m myteacherLableDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m myteacherLableDo) Delete(models ...*model.MyteacherLable) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *myteacherLableDo) withDO(do gen.Dao) *myteacherLableDo {
	m.DO = *do.(*gen.DO)
	return m
}
