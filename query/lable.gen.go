// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"learning2.0/model"
)

func newLable(db *gorm.DB, opts ...gen.DOOption) lable {
	_lable := lable{}

	_lable.lableDo.UseDB(db, opts...)
	_lable.lableDo.UseModel(&model.Lable{})

	tableName := _lable.lableDo.TableName()
	_lable.ALL = field.NewAsterisk(tableName)
	_lable.ID = field.NewInt64(tableName, "id")
	_lable.Title = field.NewString(tableName, "title")

	_lable.fillFieldMap()

	return _lable
}

type lable struct {
	lableDo lableDo

	ALL   field.Asterisk
	ID    field.Int64
	Title field.String

	fieldMap map[string]field.Expr
}

func (l lable) Table(newTableName string) *lable {
	l.lableDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lable) As(alias string) *lable {
	l.lableDo.DO = *(l.lableDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lable) updateTableName(table string) *lable {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "id")
	l.Title = field.NewString(table, "title")

	l.fillFieldMap()

	return l
}

func (l *lable) WithContext(ctx context.Context) ILableDo { return l.lableDo.WithContext(ctx) }

func (l lable) TableName() string { return l.lableDo.TableName() }

func (l lable) Alias() string { return l.lableDo.Alias() }

func (l *lable) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lable) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 2)
	l.fieldMap["id"] = l.ID
	l.fieldMap["title"] = l.Title
}

func (l lable) clone(db *gorm.DB) lable {
	l.lableDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lable) replaceDB(db *gorm.DB) lable {
	l.lableDo.ReplaceDB(db)
	return l
}

type lableDo struct{ gen.DO }

type ILableDo interface {
	gen.SubQuery
	Debug() ILableDo
	WithContext(ctx context.Context) ILableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILableDo
	WriteDB() ILableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILableDo
	Not(conds ...gen.Condition) ILableDo
	Or(conds ...gen.Condition) ILableDo
	Select(conds ...field.Expr) ILableDo
	Where(conds ...gen.Condition) ILableDo
	Order(conds ...field.Expr) ILableDo
	Distinct(cols ...field.Expr) ILableDo
	Omit(cols ...field.Expr) ILableDo
	Join(table schema.Tabler, on ...field.Expr) ILableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILableDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILableDo
	Group(cols ...field.Expr) ILableDo
	Having(conds ...gen.Condition) ILableDo
	Limit(limit int) ILableDo
	Offset(offset int) ILableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILableDo
	Unscoped() ILableDo
	Create(values ...*model.Lable) error
	CreateInBatches(values []*model.Lable, batchSize int) error
	Save(values ...*model.Lable) error
	First() (*model.Lable, error)
	Take() (*model.Lable, error)
	Last() (*model.Lable, error)
	Find() ([]*model.Lable, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lable, err error)
	FindInBatches(result *[]*model.Lable, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Lable) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILableDo
	Assign(attrs ...field.AssignExpr) ILableDo
	Joins(fields ...field.RelationField) ILableDo
	Preload(fields ...field.RelationField) ILableDo
	FirstOrInit() (*model.Lable, error)
	FirstOrCreate() (*model.Lable, error)
	FindByPage(offset int, limit int) (result []*model.Lable, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lableDo) Debug() ILableDo {
	return l.withDO(l.DO.Debug())
}

func (l lableDo) WithContext(ctx context.Context) ILableDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lableDo) ReadDB() ILableDo {
	return l.Clauses(dbresolver.Read)
}

func (l lableDo) WriteDB() ILableDo {
	return l.Clauses(dbresolver.Write)
}

func (l lableDo) Session(config *gorm.Session) ILableDo {
	return l.withDO(l.DO.Session(config))
}

func (l lableDo) Clauses(conds ...clause.Expression) ILableDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lableDo) Returning(value interface{}, columns ...string) ILableDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lableDo) Not(conds ...gen.Condition) ILableDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lableDo) Or(conds ...gen.Condition) ILableDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lableDo) Select(conds ...field.Expr) ILableDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lableDo) Where(conds ...gen.Condition) ILableDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lableDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILableDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l lableDo) Order(conds ...field.Expr) ILableDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lableDo) Distinct(cols ...field.Expr) ILableDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lableDo) Omit(cols ...field.Expr) ILableDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lableDo) Join(table schema.Tabler, on ...field.Expr) ILableDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lableDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILableDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lableDo) RightJoin(table schema.Tabler, on ...field.Expr) ILableDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lableDo) Group(cols ...field.Expr) ILableDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lableDo) Having(conds ...gen.Condition) ILableDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lableDo) Limit(limit int) ILableDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lableDo) Offset(offset int) ILableDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILableDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lableDo) Unscoped() ILableDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lableDo) Create(values ...*model.Lable) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lableDo) CreateInBatches(values []*model.Lable, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lableDo) Save(values ...*model.Lable) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lableDo) First() (*model.Lable, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lable), nil
	}
}

func (l lableDo) Take() (*model.Lable, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lable), nil
	}
}

func (l lableDo) Last() (*model.Lable, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lable), nil
	}
}

func (l lableDo) Find() ([]*model.Lable, error) {
	result, err := l.DO.Find()
	return result.([]*model.Lable), err
}

func (l lableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Lable, err error) {
	buf := make([]*model.Lable, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lableDo) FindInBatches(result *[]*model.Lable, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lableDo) Attrs(attrs ...field.AssignExpr) ILableDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lableDo) Assign(attrs ...field.AssignExpr) ILableDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lableDo) Joins(fields ...field.RelationField) ILableDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lableDo) Preload(fields ...field.RelationField) ILableDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lableDo) FirstOrInit() (*model.Lable, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lable), nil
	}
}

func (l lableDo) FirstOrCreate() (*model.Lable, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Lable), nil
	}
}

func (l lableDo) FindByPage(offset int, limit int) (result []*model.Lable, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lableDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lableDo) Delete(models ...*model.Lable) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lableDo) withDO(do gen.Dao) *lableDo {
	l.DO = *do.(*gen.DO)
	return l
}
