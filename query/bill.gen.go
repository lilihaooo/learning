// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"learning2.0/model"
)

func newBill(db *gorm.DB, opts ...gen.DOOption) bill {
	_bill := bill{}

	_bill.billDo.UseDB(db, opts...)
	_bill.billDo.UseModel(&model.Bill{})

	tableName := _bill.billDo.TableName()
	_bill.ALL = field.NewAsterisk(tableName)
	_bill.ID = field.NewInt64(tableName, "id")
	_bill.OperationID = field.NewInt64(tableName, "operation_id")
	_bill.Balance = field.NewInt64(tableName, "balance")
	_bill.Deleted = field.NewInt64(tableName, "deleted")
	_bill.Created = field.NewInt64(tableName, "created")

	_bill.fillFieldMap()

	return _bill
}

type bill struct {
	billDo billDo

	ALL         field.Asterisk
	ID          field.Int64
	OperationID field.Int64
	Balance     field.Int64
	Deleted     field.Int64
	Created     field.Int64

	fieldMap map[string]field.Expr
}

func (b bill) Table(newTableName string) *bill {
	b.billDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bill) As(alias string) *bill {
	b.billDo.DO = *(b.billDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bill) updateTableName(table string) *bill {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.OperationID = field.NewInt64(table, "operation_id")
	b.Balance = field.NewInt64(table, "balance")
	b.Deleted = field.NewInt64(table, "deleted")
	b.Created = field.NewInt64(table, "created")

	b.fillFieldMap()

	return b
}

func (b *bill) WithContext(ctx context.Context) IBillDo { return b.billDo.WithContext(ctx) }

func (b bill) TableName() string { return b.billDo.TableName() }

func (b bill) Alias() string { return b.billDo.Alias() }

func (b *bill) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bill) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 5)
	b.fieldMap["id"] = b.ID
	b.fieldMap["operation_id"] = b.OperationID
	b.fieldMap["balance"] = b.Balance
	b.fieldMap["deleted"] = b.Deleted
	b.fieldMap["created"] = b.Created
}

func (b bill) clone(db *gorm.DB) bill {
	b.billDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bill) replaceDB(db *gorm.DB) bill {
	b.billDo.ReplaceDB(db)
	return b
}

type billDo struct{ gen.DO }

type IBillDo interface {
	gen.SubQuery
	Debug() IBillDo
	WithContext(ctx context.Context) IBillDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBillDo
	WriteDB() IBillDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBillDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBillDo
	Not(conds ...gen.Condition) IBillDo
	Or(conds ...gen.Condition) IBillDo
	Select(conds ...field.Expr) IBillDo
	Where(conds ...gen.Condition) IBillDo
	Order(conds ...field.Expr) IBillDo
	Distinct(cols ...field.Expr) IBillDo
	Omit(cols ...field.Expr) IBillDo
	Join(table schema.Tabler, on ...field.Expr) IBillDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBillDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBillDo
	Group(cols ...field.Expr) IBillDo
	Having(conds ...gen.Condition) IBillDo
	Limit(limit int) IBillDo
	Offset(offset int) IBillDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBillDo
	Unscoped() IBillDo
	Create(values ...*model.Bill) error
	CreateInBatches(values []*model.Bill, batchSize int) error
	Save(values ...*model.Bill) error
	First() (*model.Bill, error)
	Take() (*model.Bill, error)
	Last() (*model.Bill, error)
	Find() ([]*model.Bill, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Bill, err error)
	FindInBatches(result *[]*model.Bill, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Bill) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBillDo
	Assign(attrs ...field.AssignExpr) IBillDo
	Joins(fields ...field.RelationField) IBillDo
	Preload(fields ...field.RelationField) IBillDo
	FirstOrInit() (*model.Bill, error)
	FirstOrCreate() (*model.Bill, error)
	FindByPage(offset int, limit int) (result []*model.Bill, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBillDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b billDo) Debug() IBillDo {
	return b.withDO(b.DO.Debug())
}

func (b billDo) WithContext(ctx context.Context) IBillDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b billDo) ReadDB() IBillDo {
	return b.Clauses(dbresolver.Read)
}

func (b billDo) WriteDB() IBillDo {
	return b.Clauses(dbresolver.Write)
}

func (b billDo) Session(config *gorm.Session) IBillDo {
	return b.withDO(b.DO.Session(config))
}

func (b billDo) Clauses(conds ...clause.Expression) IBillDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b billDo) Returning(value interface{}, columns ...string) IBillDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b billDo) Not(conds ...gen.Condition) IBillDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b billDo) Or(conds ...gen.Condition) IBillDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b billDo) Select(conds ...field.Expr) IBillDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b billDo) Where(conds ...gen.Condition) IBillDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b billDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IBillDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b billDo) Order(conds ...field.Expr) IBillDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b billDo) Distinct(cols ...field.Expr) IBillDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b billDo) Omit(cols ...field.Expr) IBillDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b billDo) Join(table schema.Tabler, on ...field.Expr) IBillDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b billDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBillDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b billDo) RightJoin(table schema.Tabler, on ...field.Expr) IBillDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b billDo) Group(cols ...field.Expr) IBillDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b billDo) Having(conds ...gen.Condition) IBillDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b billDo) Limit(limit int) IBillDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b billDo) Offset(offset int) IBillDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b billDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBillDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b billDo) Unscoped() IBillDo {
	return b.withDO(b.DO.Unscoped())
}

func (b billDo) Create(values ...*model.Bill) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b billDo) CreateInBatches(values []*model.Bill, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b billDo) Save(values ...*model.Bill) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b billDo) First() (*model.Bill, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bill), nil
	}
}

func (b billDo) Take() (*model.Bill, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bill), nil
	}
}

func (b billDo) Last() (*model.Bill, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bill), nil
	}
}

func (b billDo) Find() ([]*model.Bill, error) {
	result, err := b.DO.Find()
	return result.([]*model.Bill), err
}

func (b billDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Bill, err error) {
	buf := make([]*model.Bill, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b billDo) FindInBatches(result *[]*model.Bill, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b billDo) Attrs(attrs ...field.AssignExpr) IBillDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b billDo) Assign(attrs ...field.AssignExpr) IBillDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b billDo) Joins(fields ...field.RelationField) IBillDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b billDo) Preload(fields ...field.RelationField) IBillDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b billDo) FirstOrInit() (*model.Bill, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bill), nil
	}
}

func (b billDo) FirstOrCreate() (*model.Bill, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Bill), nil
	}
}

func (b billDo) FindByPage(offset int, limit int) (result []*model.Bill, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b billDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b billDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b billDo) Delete(models ...*model.Bill) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *billDo) withDO(do gen.Dao) *billDo {
	b.DO = *do.(*gen.DO)
	return b
}
