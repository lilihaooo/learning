// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"learning2.0/model"
)

func newMyteacher(db *gorm.DB, opts ...gen.DOOption) myteacher {
	_myteacher := myteacher{}

	_myteacher.myteacherDo.UseDB(db, opts...)
	_myteacher.myteacherDo.UseModel(&model.Myteacher{})

	tableName := _myteacher.myteacherDo.TableName()
	_myteacher.ALL = field.NewAsterisk(tableName)
	_myteacher.ID = field.NewInt64(tableName, "id")
	_myteacher.UserID = field.NewInt64(tableName, "user_id")
	_myteacher.TeacherID = field.NewInt64(tableName, "teacher_id")
	_myteacher.Created = field.NewInt64(tableName, "created")

	_myteacher.fillFieldMap()

	return _myteacher
}

type myteacher struct {
	myteacherDo myteacherDo

	ALL       field.Asterisk
	ID        field.Int64
	UserID    field.Int64
	TeacherID field.Int64
	Created   field.Int64

	fieldMap map[string]field.Expr
}

func (m myteacher) Table(newTableName string) *myteacher {
	m.myteacherDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m myteacher) As(alias string) *myteacher {
	m.myteacherDo.DO = *(m.myteacherDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *myteacher) updateTableName(table string) *myteacher {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.UserID = field.NewInt64(table, "user_id")
	m.TeacherID = field.NewInt64(table, "teacher_id")
	m.Created = field.NewInt64(table, "created")

	m.fillFieldMap()

	return m
}

func (m *myteacher) WithContext(ctx context.Context) IMyteacherDo {
	return m.myteacherDo.WithContext(ctx)
}

func (m myteacher) TableName() string { return m.myteacherDo.TableName() }

func (m myteacher) Alias() string { return m.myteacherDo.Alias() }

func (m *myteacher) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *myteacher) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 4)
	m.fieldMap["id"] = m.ID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["teacher_id"] = m.TeacherID
	m.fieldMap["created"] = m.Created
}

func (m myteacher) clone(db *gorm.DB) myteacher {
	m.myteacherDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m myteacher) replaceDB(db *gorm.DB) myteacher {
	m.myteacherDo.ReplaceDB(db)
	return m
}

type myteacherDo struct{ gen.DO }

type IMyteacherDo interface {
	gen.SubQuery
	Debug() IMyteacherDo
	WithContext(ctx context.Context) IMyteacherDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMyteacherDo
	WriteDB() IMyteacherDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMyteacherDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMyteacherDo
	Not(conds ...gen.Condition) IMyteacherDo
	Or(conds ...gen.Condition) IMyteacherDo
	Select(conds ...field.Expr) IMyteacherDo
	Where(conds ...gen.Condition) IMyteacherDo
	Order(conds ...field.Expr) IMyteacherDo
	Distinct(cols ...field.Expr) IMyteacherDo
	Omit(cols ...field.Expr) IMyteacherDo
	Join(table schema.Tabler, on ...field.Expr) IMyteacherDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMyteacherDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMyteacherDo
	Group(cols ...field.Expr) IMyteacherDo
	Having(conds ...gen.Condition) IMyteacherDo
	Limit(limit int) IMyteacherDo
	Offset(offset int) IMyteacherDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMyteacherDo
	Unscoped() IMyteacherDo
	Create(values ...*model.Myteacher) error
	CreateInBatches(values []*model.Myteacher, batchSize int) error
	Save(values ...*model.Myteacher) error
	First() (*model.Myteacher, error)
	Take() (*model.Myteacher, error)
	Last() (*model.Myteacher, error)
	Find() ([]*model.Myteacher, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Myteacher, err error)
	FindInBatches(result *[]*model.Myteacher, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Myteacher) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMyteacherDo
	Assign(attrs ...field.AssignExpr) IMyteacherDo
	Joins(fields ...field.RelationField) IMyteacherDo
	Preload(fields ...field.RelationField) IMyteacherDo
	FirstOrInit() (*model.Myteacher, error)
	FirstOrCreate() (*model.Myteacher, error)
	FindByPage(offset int, limit int) (result []*model.Myteacher, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMyteacherDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m myteacherDo) Debug() IMyteacherDo {
	return m.withDO(m.DO.Debug())
}

func (m myteacherDo) WithContext(ctx context.Context) IMyteacherDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m myteacherDo) ReadDB() IMyteacherDo {
	return m.Clauses(dbresolver.Read)
}

func (m myteacherDo) WriteDB() IMyteacherDo {
	return m.Clauses(dbresolver.Write)
}

func (m myteacherDo) Session(config *gorm.Session) IMyteacherDo {
	return m.withDO(m.DO.Session(config))
}

func (m myteacherDo) Clauses(conds ...clause.Expression) IMyteacherDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m myteacherDo) Returning(value interface{}, columns ...string) IMyteacherDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m myteacherDo) Not(conds ...gen.Condition) IMyteacherDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m myteacherDo) Or(conds ...gen.Condition) IMyteacherDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m myteacherDo) Select(conds ...field.Expr) IMyteacherDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m myteacherDo) Where(conds ...gen.Condition) IMyteacherDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m myteacherDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMyteacherDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m myteacherDo) Order(conds ...field.Expr) IMyteacherDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m myteacherDo) Distinct(cols ...field.Expr) IMyteacherDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m myteacherDo) Omit(cols ...field.Expr) IMyteacherDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m myteacherDo) Join(table schema.Tabler, on ...field.Expr) IMyteacherDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m myteacherDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMyteacherDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m myteacherDo) RightJoin(table schema.Tabler, on ...field.Expr) IMyteacherDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m myteacherDo) Group(cols ...field.Expr) IMyteacherDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m myteacherDo) Having(conds ...gen.Condition) IMyteacherDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m myteacherDo) Limit(limit int) IMyteacherDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m myteacherDo) Offset(offset int) IMyteacherDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m myteacherDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMyteacherDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m myteacherDo) Unscoped() IMyteacherDo {
	return m.withDO(m.DO.Unscoped())
}

func (m myteacherDo) Create(values ...*model.Myteacher) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m myteacherDo) CreateInBatches(values []*model.Myteacher, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m myteacherDo) Save(values ...*model.Myteacher) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m myteacherDo) First() (*model.Myteacher, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Myteacher), nil
	}
}

func (m myteacherDo) Take() (*model.Myteacher, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Myteacher), nil
	}
}

func (m myteacherDo) Last() (*model.Myteacher, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Myteacher), nil
	}
}

func (m myteacherDo) Find() ([]*model.Myteacher, error) {
	result, err := m.DO.Find()
	return result.([]*model.Myteacher), err
}

func (m myteacherDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Myteacher, err error) {
	buf := make([]*model.Myteacher, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m myteacherDo) FindInBatches(result *[]*model.Myteacher, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m myteacherDo) Attrs(attrs ...field.AssignExpr) IMyteacherDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m myteacherDo) Assign(attrs ...field.AssignExpr) IMyteacherDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m myteacherDo) Joins(fields ...field.RelationField) IMyteacherDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m myteacherDo) Preload(fields ...field.RelationField) IMyteacherDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m myteacherDo) FirstOrInit() (*model.Myteacher, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Myteacher), nil
	}
}

func (m myteacherDo) FirstOrCreate() (*model.Myteacher, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Myteacher), nil
	}
}

func (m myteacherDo) FindByPage(offset int, limit int) (result []*model.Myteacher, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m myteacherDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m myteacherDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m myteacherDo) Delete(models ...*model.Myteacher) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *myteacherDo) withDO(do gen.Dao) *myteacherDo {
	m.DO = *do.(*gen.DO)
	return m
}
