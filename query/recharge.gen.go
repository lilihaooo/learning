// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"learning2.0/model"
)

func newRecharge(db *gorm.DB, opts ...gen.DOOption) recharge {
	_recharge := recharge{}

	_recharge.rechargeDo.UseDB(db, opts...)
	_recharge.rechargeDo.UseModel(&model.Recharge{})

	tableName := _recharge.rechargeDo.TableName()
	_recharge.ALL = field.NewAsterisk(tableName)
	_recharge.ID = field.NewInt64(tableName, "id")
	_recharge.Title = field.NewString(tableName, "title")
	_recharge.UserID = field.NewInt64(tableName, "user_id")
	_recharge.Sum = field.NewInt64(tableName, "sum")
	_recharge.Created = field.NewInt64(tableName, "created")

	_recharge.fillFieldMap()

	return _recharge
}

type recharge struct {
	rechargeDo rechargeDo

	ALL     field.Asterisk
	ID      field.Int64
	Title   field.String
	UserID  field.Int64
	Sum     field.Int64 // 金额
	Created field.Int64

	fieldMap map[string]field.Expr
}

func (r recharge) Table(newTableName string) *recharge {
	r.rechargeDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r recharge) As(alias string) *recharge {
	r.rechargeDo.DO = *(r.rechargeDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *recharge) updateTableName(table string) *recharge {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.Title = field.NewString(table, "title")
	r.UserID = field.NewInt64(table, "user_id")
	r.Sum = field.NewInt64(table, "sum")
	r.Created = field.NewInt64(table, "created")

	r.fillFieldMap()

	return r
}

func (r *recharge) WithContext(ctx context.Context) IRechargeDo { return r.rechargeDo.WithContext(ctx) }

func (r recharge) TableName() string { return r.rechargeDo.TableName() }

func (r recharge) Alias() string { return r.rechargeDo.Alias() }

func (r *recharge) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *recharge) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 5)
	r.fieldMap["id"] = r.ID
	r.fieldMap["title"] = r.Title
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["sum"] = r.Sum
	r.fieldMap["created"] = r.Created
}

func (r recharge) clone(db *gorm.DB) recharge {
	r.rechargeDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r recharge) replaceDB(db *gorm.DB) recharge {
	r.rechargeDo.ReplaceDB(db)
	return r
}

type rechargeDo struct{ gen.DO }

type IRechargeDo interface {
	gen.SubQuery
	Debug() IRechargeDo
	WithContext(ctx context.Context) IRechargeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRechargeDo
	WriteDB() IRechargeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRechargeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRechargeDo
	Not(conds ...gen.Condition) IRechargeDo
	Or(conds ...gen.Condition) IRechargeDo
	Select(conds ...field.Expr) IRechargeDo
	Where(conds ...gen.Condition) IRechargeDo
	Order(conds ...field.Expr) IRechargeDo
	Distinct(cols ...field.Expr) IRechargeDo
	Omit(cols ...field.Expr) IRechargeDo
	Join(table schema.Tabler, on ...field.Expr) IRechargeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRechargeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRechargeDo
	Group(cols ...field.Expr) IRechargeDo
	Having(conds ...gen.Condition) IRechargeDo
	Limit(limit int) IRechargeDo
	Offset(offset int) IRechargeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargeDo
	Unscoped() IRechargeDo
	Create(values ...*model.Recharge) error
	CreateInBatches(values []*model.Recharge, batchSize int) error
	Save(values ...*model.Recharge) error
	First() (*model.Recharge, error)
	Take() (*model.Recharge, error)
	Last() (*model.Recharge, error)
	Find() ([]*model.Recharge, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Recharge, err error)
	FindInBatches(result *[]*model.Recharge, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Recharge) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRechargeDo
	Assign(attrs ...field.AssignExpr) IRechargeDo
	Joins(fields ...field.RelationField) IRechargeDo
	Preload(fields ...field.RelationField) IRechargeDo
	FirstOrInit() (*model.Recharge, error)
	FirstOrCreate() (*model.Recharge, error)
	FindByPage(offset int, limit int) (result []*model.Recharge, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRechargeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rechargeDo) Debug() IRechargeDo {
	return r.withDO(r.DO.Debug())
}

func (r rechargeDo) WithContext(ctx context.Context) IRechargeDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rechargeDo) ReadDB() IRechargeDo {
	return r.Clauses(dbresolver.Read)
}

func (r rechargeDo) WriteDB() IRechargeDo {
	return r.Clauses(dbresolver.Write)
}

func (r rechargeDo) Session(config *gorm.Session) IRechargeDo {
	return r.withDO(r.DO.Session(config))
}

func (r rechargeDo) Clauses(conds ...clause.Expression) IRechargeDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rechargeDo) Returning(value interface{}, columns ...string) IRechargeDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rechargeDo) Not(conds ...gen.Condition) IRechargeDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rechargeDo) Or(conds ...gen.Condition) IRechargeDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rechargeDo) Select(conds ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rechargeDo) Where(conds ...gen.Condition) IRechargeDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rechargeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRechargeDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r rechargeDo) Order(conds ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rechargeDo) Distinct(cols ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rechargeDo) Omit(cols ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rechargeDo) Join(table schema.Tabler, on ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rechargeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rechargeDo) RightJoin(table schema.Tabler, on ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rechargeDo) Group(cols ...field.Expr) IRechargeDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rechargeDo) Having(conds ...gen.Condition) IRechargeDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rechargeDo) Limit(limit int) IRechargeDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rechargeDo) Offset(offset int) IRechargeDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rechargeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRechargeDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rechargeDo) Unscoped() IRechargeDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rechargeDo) Create(values ...*model.Recharge) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rechargeDo) CreateInBatches(values []*model.Recharge, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rechargeDo) Save(values ...*model.Recharge) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rechargeDo) First() (*model.Recharge, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Recharge), nil
	}
}

func (r rechargeDo) Take() (*model.Recharge, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Recharge), nil
	}
}

func (r rechargeDo) Last() (*model.Recharge, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Recharge), nil
	}
}

func (r rechargeDo) Find() ([]*model.Recharge, error) {
	result, err := r.DO.Find()
	return result.([]*model.Recharge), err
}

func (r rechargeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Recharge, err error) {
	buf := make([]*model.Recharge, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rechargeDo) FindInBatches(result *[]*model.Recharge, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rechargeDo) Attrs(attrs ...field.AssignExpr) IRechargeDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rechargeDo) Assign(attrs ...field.AssignExpr) IRechargeDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rechargeDo) Joins(fields ...field.RelationField) IRechargeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rechargeDo) Preload(fields ...field.RelationField) IRechargeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rechargeDo) FirstOrInit() (*model.Recharge, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Recharge), nil
	}
}

func (r rechargeDo) FirstOrCreate() (*model.Recharge, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Recharge), nil
	}
}

func (r rechargeDo) FindByPage(offset int, limit int) (result []*model.Recharge, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rechargeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rechargeDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rechargeDo) Delete(models ...*model.Recharge) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rechargeDo) withDO(do gen.Dao) *rechargeDo {
	r.DO = *do.(*gen.DO)
	return r
}
