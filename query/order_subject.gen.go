// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"learning2.0/model"
)

func newOrderSubject(db *gorm.DB, opts ...gen.DOOption) orderSubject {
	_orderSubject := orderSubject{}

	_orderSubject.orderSubjectDo.UseDB(db, opts...)
	_orderSubject.orderSubjectDo.UseModel(&model.OrderSubject{})

	tableName := _orderSubject.orderSubjectDo.TableName()
	_orderSubject.ALL = field.NewAsterisk(tableName)
	_orderSubject.ID = field.NewInt64(tableName, "id")
	_orderSubject.OrderID = field.NewInt64(tableName, "order_id")
	_orderSubject.SubjectID = field.NewInt64(tableName, "subject_id")
	_orderSubject.Num = field.NewInt64(tableName, "num")

	_orderSubject.fillFieldMap()

	return _orderSubject
}

type orderSubject struct {
	orderSubjectDo orderSubjectDo

	ALL       field.Asterisk
	ID        field.Int64
	OrderID   field.Int64
	SubjectID field.Int64
	Num       field.Int64

	fieldMap map[string]field.Expr
}

func (o orderSubject) Table(newTableName string) *orderSubject {
	o.orderSubjectDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderSubject) As(alias string) *orderSubject {
	o.orderSubjectDo.DO = *(o.orderSubjectDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderSubject) updateTableName(table string) *orderSubject {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.OrderID = field.NewInt64(table, "order_id")
	o.SubjectID = field.NewInt64(table, "subject_id")
	o.Num = field.NewInt64(table, "num")

	o.fillFieldMap()

	return o
}

func (o *orderSubject) WithContext(ctx context.Context) IOrderSubjectDo {
	return o.orderSubjectDo.WithContext(ctx)
}

func (o orderSubject) TableName() string { return o.orderSubjectDo.TableName() }

func (o orderSubject) Alias() string { return o.orderSubjectDo.Alias() }

func (o *orderSubject) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderSubject) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 4)
	o.fieldMap["id"] = o.ID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["subject_id"] = o.SubjectID
	o.fieldMap["num"] = o.Num
}

func (o orderSubject) clone(db *gorm.DB) orderSubject {
	o.orderSubjectDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderSubject) replaceDB(db *gorm.DB) orderSubject {
	o.orderSubjectDo.ReplaceDB(db)
	return o
}

type orderSubjectDo struct{ gen.DO }

type IOrderSubjectDo interface {
	gen.SubQuery
	Debug() IOrderSubjectDo
	WithContext(ctx context.Context) IOrderSubjectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderSubjectDo
	WriteDB() IOrderSubjectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderSubjectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderSubjectDo
	Not(conds ...gen.Condition) IOrderSubjectDo
	Or(conds ...gen.Condition) IOrderSubjectDo
	Select(conds ...field.Expr) IOrderSubjectDo
	Where(conds ...gen.Condition) IOrderSubjectDo
	Order(conds ...field.Expr) IOrderSubjectDo
	Distinct(cols ...field.Expr) IOrderSubjectDo
	Omit(cols ...field.Expr) IOrderSubjectDo
	Join(table schema.Tabler, on ...field.Expr) IOrderSubjectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderSubjectDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderSubjectDo
	Group(cols ...field.Expr) IOrderSubjectDo
	Having(conds ...gen.Condition) IOrderSubjectDo
	Limit(limit int) IOrderSubjectDo
	Offset(offset int) IOrderSubjectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderSubjectDo
	Unscoped() IOrderSubjectDo
	Create(values ...*model.OrderSubject) error
	CreateInBatches(values []*model.OrderSubject, batchSize int) error
	Save(values ...*model.OrderSubject) error
	First() (*model.OrderSubject, error)
	Take() (*model.OrderSubject, error)
	Last() (*model.OrderSubject, error)
	Find() ([]*model.OrderSubject, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderSubject, err error)
	FindInBatches(result *[]*model.OrderSubject, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderSubject) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderSubjectDo
	Assign(attrs ...field.AssignExpr) IOrderSubjectDo
	Joins(fields ...field.RelationField) IOrderSubjectDo
	Preload(fields ...field.RelationField) IOrderSubjectDo
	FirstOrInit() (*model.OrderSubject, error)
	FirstOrCreate() (*model.OrderSubject, error)
	FindByPage(offset int, limit int) (result []*model.OrderSubject, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderSubjectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderSubjectDo) Debug() IOrderSubjectDo {
	return o.withDO(o.DO.Debug())
}

func (o orderSubjectDo) WithContext(ctx context.Context) IOrderSubjectDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderSubjectDo) ReadDB() IOrderSubjectDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderSubjectDo) WriteDB() IOrderSubjectDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderSubjectDo) Session(config *gorm.Session) IOrderSubjectDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderSubjectDo) Clauses(conds ...clause.Expression) IOrderSubjectDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderSubjectDo) Returning(value interface{}, columns ...string) IOrderSubjectDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderSubjectDo) Not(conds ...gen.Condition) IOrderSubjectDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderSubjectDo) Or(conds ...gen.Condition) IOrderSubjectDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderSubjectDo) Select(conds ...field.Expr) IOrderSubjectDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderSubjectDo) Where(conds ...gen.Condition) IOrderSubjectDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderSubjectDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IOrderSubjectDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o orderSubjectDo) Order(conds ...field.Expr) IOrderSubjectDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderSubjectDo) Distinct(cols ...field.Expr) IOrderSubjectDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderSubjectDo) Omit(cols ...field.Expr) IOrderSubjectDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderSubjectDo) Join(table schema.Tabler, on ...field.Expr) IOrderSubjectDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderSubjectDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderSubjectDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderSubjectDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderSubjectDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderSubjectDo) Group(cols ...field.Expr) IOrderSubjectDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderSubjectDo) Having(conds ...gen.Condition) IOrderSubjectDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderSubjectDo) Limit(limit int) IOrderSubjectDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderSubjectDo) Offset(offset int) IOrderSubjectDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderSubjectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderSubjectDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderSubjectDo) Unscoped() IOrderSubjectDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderSubjectDo) Create(values ...*model.OrderSubject) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderSubjectDo) CreateInBatches(values []*model.OrderSubject, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderSubjectDo) Save(values ...*model.OrderSubject) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderSubjectDo) First() (*model.OrderSubject, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderSubject), nil
	}
}

func (o orderSubjectDo) Take() (*model.OrderSubject, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderSubject), nil
	}
}

func (o orderSubjectDo) Last() (*model.OrderSubject, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderSubject), nil
	}
}

func (o orderSubjectDo) Find() ([]*model.OrderSubject, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderSubject), err
}

func (o orderSubjectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderSubject, err error) {
	buf := make([]*model.OrderSubject, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderSubjectDo) FindInBatches(result *[]*model.OrderSubject, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderSubjectDo) Attrs(attrs ...field.AssignExpr) IOrderSubjectDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderSubjectDo) Assign(attrs ...field.AssignExpr) IOrderSubjectDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderSubjectDo) Joins(fields ...field.RelationField) IOrderSubjectDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderSubjectDo) Preload(fields ...field.RelationField) IOrderSubjectDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderSubjectDo) FirstOrInit() (*model.OrderSubject, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderSubject), nil
	}
}

func (o orderSubjectDo) FirstOrCreate() (*model.OrderSubject, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderSubject), nil
	}
}

func (o orderSubjectDo) FindByPage(offset int, limit int) (result []*model.OrderSubject, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderSubjectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderSubjectDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderSubjectDo) Delete(models ...*model.OrderSubject) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderSubjectDo) withDO(do gen.Dao) *orderSubjectDo {
	o.DO = *do.(*gen.DO)
	return o
}
